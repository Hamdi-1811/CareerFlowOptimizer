import * as functions from 'firebase-functions';
import * as admin from 'firebase-admin';
import { request } from 'http';

// Initialize Firebase Admin SDK
// This allows your functions to interact with other Firebase services
admin.initializeApp();

// Get a reference to the Firestore database
const db = admin.firestore();

// --- 1. Anonymous User Tracking Function ---
// This HTTP-triggered function will increment a counter in Firestore for unique app loads.
// It uses a POST request and expects a JSON body with { userId: string, event: string }.
export const trackUsage = functions.https.onRequest(async (req, res) => {
    // Enable CORS for frontend access (important for local testing and deployment)
    res.set('Access-Control-Allow-Origin', '*');
    res.set('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.set('Access-Control-Allow-Headers', 'Content-Type');

    // Handle preflight requests (OPTIONS method)
    if (req.method === 'OPTIONS') {
        res.status(204).send('');
        return;
    }

    if (req.method !== 'POST') {
        return res.status(405).send('Method Not Allowed');
    }

    const { userId, event } = req.body;

    if (!userId) {
        return res.status(400).send('User ID is required.');
    }

    const usersRef = db.collection('app_usage').doc(userId); // Document for this specific user ID
    const appStatsRef = db.collection('app_metrics').doc('stats'); // Document for overall stats

    try {
        await db.runTransaction(async (transaction) => {
            const userDoc = await transaction.get(usersRef);

            if (!userDoc.exists) {
                // If user ID is new, increment total unique users
                transaction.set(usersRef, { firstSeen: admin.firestore.FieldValue.serverTimestamp() }); // Mark user as seen

                // Atomically increment the 'totalUsers' field
                transaction.set(appStatsRef, {
                    totalUsers: admin.firestore.FieldValue.increment(1)
                }, { merge: true }); // Use merge: true to avoid overwriting other fields
                console.log(`New unique user detected: ${userId}`);
            } else {
                console.log(`Existing user ${userId} accessed app.`);
                // Optionally, you could track sessions or daily visits here if needed
                // For now, we only count truly unique users on first load.
            }
        });
        return res.status(200).send('Usage tracked.');
    } catch (error) {
        console.error('Error tracking usage:', error);
        return res.status(500).send('Internal Server Error.');
    }
});

// --- 2. Placeholder for Main AI Function ---
// This HTTP-triggered function will be responsible for CV optimization and Cover Letter generation.
// We will add the detailed Genkit AI logic here in the next step.
export const optimizeCvAndGenerateCoverLetter = functions.https.onRequest(async (req, res) => {
    // Enable CORS
    res.set('Access-Control-Allow-Origin', '*');
    res.set('Access-Control-Allow-Methods', 'POST, OPTIONS');
    res.set('Access-Control-Allow-Headers', 'Content-Type');

    if (req.method === 'OPTIONS') {
        res.status(204).send('');
        return;
    }

    if (req.method !== 'POST') {
        return res.status(405).send('Method Not Allowed');
    }

    // You will receive data like:
    // {
    //   masterCV: string,
    //   jobDescriptionText?: string,
    //   jobDescriptionImage?: string, // Base64 encoded image
    //   generateCoverLetter?: boolean,
    //   companyName?: string,
    //   contactName?: string,
    //   jobPosition?: string
    // }
    const { masterCV, jobDescriptionText, jobDescriptionImage, generateCoverLetter, companyName, contactName, jobPosition } = req.body;

    if (!masterCV || (!jobDescriptionText && !jobDescriptionImage)) {
        return res.status(400).send('Master CV and Job Description (text or image) are required.');
    }

    try {
        let jobDescription = jobDescriptionText;

        // Placeholder for OCR if image is provided
        if (jobDescriptionImage) {
            // In a later step, we will add Google Cloud Vision API here
            // to extract text from the jobDescriptionImage.
            // For now, let's just acknowledge it.
            console.log("Job Description image received. OCR processing will be added here.");
            // Example: jobDescription = await ocrService.extractText(jobDescriptionImage);
        }

        let optimizedCVContent = "Placeholder: Optimized CV content will be generated by AI.";
        let initialCVScore = 0;
        let optimizedCVScore = 0;
        let coverLetterContent = "Placeholder: Cover letter content will be generated by AI.";
        let coverLetterScore = 0;

        // In the next step, we will integrate the Genkit AI flows here
        // for CV optimization and Cover Letter generation.

        res.status(200).json({
            optimizedCV: optimizedCVContent,
            initialCVScore: initialCVScore,
            optimizedCVScore: optimizedCVScore,
            coverLetter: coverLetterContent,
            coverLetterScore: coverLetterScore,
            message: "Processing request (AI logic to be integrated in next step)."
        });

    } catch (error) {
        console.error('Error in optimizeCvAndGenerateCoverLetter function:', error);
        res.status(500).send('Internal Server Error during processing.');
    }
});
